import { STORAGE_KEYS, APP_CONFIG } from './constants.js';
import { deepClone } from './helpers.js';

/**
 * –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–∏–≥—Ä–∞—Ü–∏–π
 */
export class Storage {
    constructor(prefix = APP_CONFIG.STORAGE_PREFIX) {
        this.prefix = prefix;
        this.version = '1.0.0';
        this.migrations = new Map();
        this.cache = new Map();
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     */
    init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É localStorage
        if (!this.isSupported()) {
            console.warn('‚ö†Ô∏è localStorage –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            return;
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        this.runMigrations();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ localStorage
     */
    isSupported() {
        try {
            const test = '__storage_test__';
            localStorage.setItem(test, 'test');
            localStorage.removeItem(test);
            return true;
        } catch (e) {
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫–ª—é—á–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
     */
    getKey(key) {
        return `${this.prefix}${key}`;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    set(key, value, options = {}) {
        if (!this.isSupported()) {
            console.warn('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
            return false;
        }

        try {
            const data = {
                value: deepClone(value),
                timestamp: Date.now(),
                version: this.version,
                expires: options.expires || null
            };

            const fullKey = this.getKey(key);
            localStorage.setItem(fullKey, JSON.stringify(data));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            this.cache.set(key, data);
            
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    get(key, defaultValue = null) {
        if (!this.isSupported()) {
            return defaultValue;
        }

        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (this.cache.has(key)) {
                const cached = this.cache.get(key);
                if (!this.isExpired(cached)) {
                    return deepClone(cached.value);
                } else {
                    this.cache.delete(key);
                    this.remove(key);
                }
            }

            const fullKey = this.getKey(key);
            const stored = localStorage.getItem(fullKey);
            
            if (!stored) {
                return defaultValue;
            }

            const data = JSON.parse(stored);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if (this.isExpired(data)) {
                this.remove(key);
                return defaultValue;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
            this.cache.set(key, data);
            
            return deepClone(data.value);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return defaultValue;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
     */
    isExpired(data) {
        if (!data.expires) return false;
        return Date.now() > data.expires;
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    remove(key) {
        if (!this.isSupported()) {
            return false;
        }

        try {
            const fullKey = this.getKey(key);
            localStorage.removeItem(fullKey);
            this.cache.delete(key);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
     */
    has(key) {
        if (!this.isSupported()) {
            return false;
        }

        return localStorage.getItem(this.getKey(key)) !== null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
     */
    keys() {
        if (!this.isSupported()) {
            return [];
        }

        const keys = [];
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && key.startsWith(this.prefix)) {
                keys.push(key.substring(this.prefix.length));
            }
        }
        return keys;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
     */
    clear() {
        if (!this.isSupported()) {
            return false;
        }

        try {
            const keys = this.keys();
            keys.forEach(key => this.remove(key));
            this.cache.clear();
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     */
    size() {
        return this.keys().length;
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    export() {
        const data = {};
        const keys = this.keys();
        
        keys.forEach(key => {
            data[key] = this.get(key);
        });
        
        return {
            version: this.version,
            timestamp: Date.now(),
            data
        };
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
     */
    import(exportData, options = {}) {
        if (!exportData || !exportData.data) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
        }

        const { clearBefore = false } = options;
        
        if (clearBefore) {
            this.clear();
        }

        let imported = 0;
        let errors = 0;

        Object.keys(exportData.data).forEach(key => {
            try {
                this.set(key, exportData.data[key]);
                imported++;
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª—é—á–∞ ${key}:`, error);
                errors++;
            }
        });

        return { imported, errors };
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
     */
    addMigration(version, migrationFn) {
        this.migrations.set(version, migrationFn);
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
     */
    runMigrations() {
        const currentVersion = this.get('_version', '0.0.0');
        
        if (currentVersion === this.version) {
            return; // –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω—É–∂–Ω—ã
        }

        console.log(`üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π —Å ${currentVersion} –¥–æ ${this.version}`);

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ –≤–µ—Ä—Å–∏–∏
        const sortedMigrations = Array.from(this.migrations.entries())
            .sort(([a], [b]) => a.localeCompare(b));

        for (const [version, migration] of sortedMigrations) {
            if (version > currentVersion && version <= this.version) {
                try {
                    console.log(`üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ –≤–µ—Ä—Å–∏—é ${version}`);
                    migration(this);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ ${version}:`, error);
                }
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
        this.set('_version', this.version);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
     */
    getInfo() {
        return {
            version: this.version,
            prefix: this.prefix,
            supported: this.isSupported(),
            size: this.size(),
            cacheSize: this.cache.size,
            keys: this.keys()
        };
    }
}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
 */

/**
 * –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export class UserStorage extends Storage {
    constructor() {
        super('oms_user_');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        this.addMigration('1.0.0', this.migrate_1_0_0.bind(this));
    }

    /**
     * –ú–∏–≥—Ä–∞—Ü–∏—è 1.0.0
     */
    migrate_1_0_0(storage) {
        // –ü—Ä–∏–º–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π
        const oldUserData = storage.get('user', null);
        if (oldUserData) {
            storage.set('currentUser', oldUserData);
            storage.remove('user');
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    setCurrentUser(user) {
        return this.set(STORAGE_KEYS.CURRENT_USER, user);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    getCurrentUser() {
        return this.get(STORAGE_KEYS.CURRENT_USER);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    clearUserData() {
        this.remove(STORAGE_KEYS.CURRENT_USER);
    }
}

/**
 * –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export class AppStorage extends Storage {
    constructor() {
        super('oms_app_');
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
     */
    setOrders(orders) {
        return this.set(STORAGE_KEYS.ORDERS, orders);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
     */
    getOrders() {
        return this.get(STORAGE_KEYS.ORDERS, []);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
     */
    setProcesses(processes) {
        return this.set(STORAGE_KEYS.PROCESSES, processes);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
     */
    getProcesses() {
        return this.get(STORAGE_KEYS.PROCESSES, []);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–¥–µ–ª–∏–π
     */
    setProducts(products) {
        return this.set(STORAGE_KEYS.PRODUCTS, products);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–¥–µ–ª–∏–π
     */
    getProducts() {
        return this.get(STORAGE_KEYS.PRODUCTS, []);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    setUsers(users) {
        return this.set(STORAGE_KEYS.USERS, users);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    getUsers() {
        return this.get(STORAGE_KEYS.USERS, []);
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
     */
    setAppData(data) {
        const success = [];
        
        if (data.orders) success.push(this.setOrders(data.orders));
        if (data.processes) success.push(this.setProcesses(data.processes));
        if (data.products) success.push(this.setProducts(data.products));
        if (data.users) success.push(this.setUsers(data.users));
        
        return success.every(result => result);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    getAppData() {
        return {
            orders: this.getOrders(),
            processes: this.getProcesses(),
            products: this.getProducts(),
            users: this.getUsers()
        };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
export const userStorage = new UserStorage();
export const appStorage = new AppStorage();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.userStorage = userStorage;
window.appStorage = appStorage;

export default {
    Storage,
    UserStorage,
    AppStorage,
    userStorage,
    appStorage
};
import { eventBus } from './core/EventBus.js';
import { store } from './core/Store.js';
import { router } from './core/Router.js';
import { authModule } from './modules/AuthModule.js';
import { dataModule } from './modules/DataModule.js';
import { EVENTS, APP_CONFIG } from './utils/constants.js';

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è OMS
 */
class App {
    constructor() {
        this.isInitialized = false;
        this.currentView = null;
        this.modules = new Map();
        
        console.log(`üöÄ –ó–∞–ø—É—Å–∫ ${APP_CONFIG.NAME} v${APP_CONFIG.VERSION}`);
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —è–¥—Ä–æ
            await this.initCore();
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
            this.registerModules();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ—É—Ç–∏–Ω–≥
            this.setupRouting();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
            await this.initUI();
            
            this.isInitialized = true;
            
            // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
            this.hideLoadingScreen();
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            eventBus.emit(EVENTS.APP_READY);
            
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ OMS –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', error.message);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–¥—Ä–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    async initCore() {
        // EventBus —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
        eventBus.setDebug(APP_CONFIG.DEBUG);
        
        // Store —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
        console.log('‚úÖ –Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
     */
    registerModules() {
        // –ú–æ–¥—É–ª–∏ —É–∂–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏ —Å–∞–º–∏ —Å–µ–±—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç
        this.modules.set('auth', authModule);
        this.modules.set('data', dataModule);
        
        console.log('‚úÖ –ú–æ–¥—É–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:', Array.from(this.modules.keys()));
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–∏–Ω–≥–∞
     */
    setupRouting() {
        // –ú–∞—Ä—à—Ä—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        router.addRoute('/', () => this.showDashboard(), { name: 'dashboard' });
        
        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        router.addRoute('/login', () => this.showLogin(), { name: 'login' });
        router.addRoute('/logout', () => this.logout(), { name: 'logout' });
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        router.addRoute('/orders', () => this.showOrders(), { name: 'orders' });
        router.addRoute('/orders/:id', (route) => this.showOrderDetails(route.params.id), { name: 'order-details' });
        router.addRoute('/processes', () => this.showProcesses(), { name: 'processes' });
        router.addRoute('/products', () => this.showProducts(), { name: 'products' });
        router.addRoute('/users', () => this.showUsers(), { name: 'users' });
        router.addRoute('/analytics', () => this.showAnalytics(), { name: 'analytics' });
        router.addRoute('/settings', () => this.showSettings(), { name: 'settings' });
        
        // –•—É–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞
        router.beforeEach((to, from) => {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if (to.path !== '/login' && !authModule.isAuthenticated()) {
                router.push('/login');
                return false;
            }
            return true;
        });

        router.afterEach((to, from) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            document.title = this.getPageTitle(to.name);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
            if (APP_CONFIG.DEBUG) {
                console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥: ${from?.path || 'initial'} ‚Üí ${to.path}`);
            }
        });
        
        console.log('‚úÖ –†–æ—É—Ç–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –°–æ–±—ã—Ç–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        eventBus.on(EVENTS.USER_LOGIN, (user) => {
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª:', user.name);
            router.push('/');
        });

        eventBus.on(EVENTS.USER_LOGOUT, () => {
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª');
            router.push('/login');
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        eventBus.on(EVENTS.ERROR, (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
            this.showNotification('error', error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        });

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        window.addEventListener('error', (event) => {
            console.error('‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
            eventBus.emit(EVENTS.ERROR, {
                message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞',
                error: event.error
            });
        });

        window.addEventListener('unhandledrejection', (event) => {
            console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', event.reason);
            eventBus.emit(EVENTS.ERROR, {
                message: '–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏',
                error: event.reason
            });
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', this.debounce(() => {
            eventBus.emit('window:resize', {
                width: window.innerWidth,
                height: window.innerHeight
            });
        }, 250));

        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
     */
    async initUI() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (authModule.isAuthenticated()) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await this.showMainInterface();
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
            router.push('/login');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
     */
    async showMainInterface() {
        const app = document.getElementById('app');
        const user = authModule.getCurrentUser();
        
        app.innerHTML = `
            <div class="main-app">
                <header class="header">
                    <div class="container">
                        <div class="header-content">
                            <div class="header-logo">
                                <h1>OMS</h1>
                                <span class="version">v${APP_CONFIG.VERSION}</span>
                            </div>
                            <nav class="header-nav">
                                <ul class="nav">
                                    <li class="nav-item">
                                        <a href="#/" class="nav-link" data-route="/">–ü–∞–Ω–µ–ª—å</a>
                                    </li>
                                    <li class="nav-item">
                                        <a href="#/orders" class="nav-link" data-route="/orders">–ó–∞–∫–∞–∑—ã</a>
                                    </li>
                                    <li class="nav-item">
                                        <a href="#/processes" class="nav-link" data-route="/processes">–ü—Ä–æ—Ü–µ—Å—Å—ã</a>
                                    </li>
                                    ${user.role === 'admin' ? `
                                    <li class="nav-item">
                                        <a href="#/users" class="nav-link" data-route="/users">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</a>
                                    </li>
                                    <li class="nav-item">
                                        <a href="#/analytics" class="nav-link" data-route="/analytics">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</a>
                                    </li>
                                    ` : ''}
                                </ul>
                            </nav>
                            <div class="header-actions">
                                <div class="user-info">
                                    <span>üë§ ${user.name}</span>
                                </div>
                                <button class="btn btn-sm btn-secondary theme-toggle" id="themeToggle">
                                    üåô
                                </button>
                                <button class="btn btn-sm btn-danger" onclick="app.logout()">
                                    –í—ã–π—Ç–∏
                                </button>
                            </div>
                        </div>
                    </div>
                </header>
                <main class="main-content" id="mainContent">
                    <div class="container">
                        <div class="loading-spinner"></div>
                        <p class="text-center">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                    </div>
                </main>
            </div>
            <div id="modalContainer"></div>
            <div id="toastContainer" class="toast-container"></div>
        `;

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
        this.setupThemeToggle();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        this.setupNavigation();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        router.handleRoute();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —Ç–µ–º—ã
     */
    setupThemeToggle() {
        const themeToggle = document.getElementById('themeToggle');
        if (!themeToggle) return;

        const currentTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', currentTheme);
        themeToggle.textContent = currentTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';

        themeToggle.addEventListener('click', () => {
            const current = document.documentElement.getAttribute('data-theme') || 'light';
            const newTheme = current === 'light' ? 'dark' : 'light';
            
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            themeToggle.textContent = newTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
     */
    setupNavigation() {
        document.addEventListener('click', (event) => {
            const link = event.target.closest('[data-route]');
            if (link) {
                event.preventDefault();
                const route = link.getAttribute('data-route');
                router.push(route);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                document.querySelectorAll('.nav-link').forEach(el => el.classList.remove('active'));
                link.classList.add('active');
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
     */
    showDashboard() {
        this.setMainContent(`
            <div class="dashboard">
                <h2>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
                <div id="dashboardStats" class="stats-grid">
                    <div class="loading-spinner"></div>
                </div>
                <div id="dashboardCharts">
                    <div class="card">
                        <div class="card-header">
                            <h3>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é</h3>
                        </div>
                        <div class="card-body">
                            <p class="text-muted">–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –∑–¥–µ—Å—å</p>
                        </div>
                    </div>
                </div>
            </div>
        `);
        
        this.loadDashboardData();
    }

    showLogin() {
        const app = document.getElementById('app');
        app.innerHTML = `
            <div class="login-container d-flex justify-center items-center h-full">
                <div class="card" style="width: 400px;">
                    <div class="card-header text-center">
                        <h2>–í—Ö–æ–¥ –≤ OMS</h2>
                        <p class="text-muted">–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏</p>
                    </div>
                    <div class="card-body">
                        <form id="loginForm">
                            <div class="form-group">
                                <label class="form-label">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</label>
                                <input type="text" name="username" class="form-input" placeholder="–ò–º—è, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">–ü–∞—Ä–æ–ª—å</label>
                                <input type="password" name="password" class="form-input" placeholder="–ü–∞—Ä–æ–ª—å" required>
                            </div>
                            <button type="submit" class="btn btn-primary w-full">–í–æ–π—Ç–∏</button>
                            <div id="loginError" class="alert alert-danger hidden" style="margin-top: 1rem;"></div>
                        </form>
                    </div>
                    <div class="card-footer text-center">
                        <small class="text-muted">
                            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä / 1488
                        </small>
                    </div>
                </div>
            </div>
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const username = formData.get('username');
            const password = formData.get('password');
            
            const result = await authModule.login(username, password);
            
            if (!result.success) {
                const errorEl = document.getElementById('loginError');
                errorEl.textContent = result.error;
                errorEl.classList.remove('hidden');
            }
        });
    }

    showOrders() {
        this.setMainContent(`
            <div class="orders-view">
                <div class="d-flex justify-between items-center" style="margin-bottom: 2rem;">
                    <h2>–ó–∞–∫–∞–∑—ã</h2>
                    <button class="btn btn-primary" onclick="app.showCreateOrderModal()">
                        –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
                    </button>
                </div>
                <div id="processBoard" class="process-board">
                    <div class="loading-spinner"></div>
                    <p class="text-center">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...</p>
                </div>
            </div>
        `);
        
        this.loadOrdersBoard();
    }

    showProcesses() {
        this.setMainContent(`
            <div class="processes-view">
                <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏</h2>
                <div id="processesContent">
                    <div class="loading-spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...</p>
                </div>
            </div>
        `);
    }

    showUsers() {
        this.setMainContent(`
            <div class="users-view">
                <h2>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h2>
                <div id="usersContent">
                    <div class="loading-spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</p>
                </div>
            </div>
        `);
    }

    showAnalytics() {
        this.setMainContent(`
            <div class="analytics-view">
                <h2>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h2>
                <div id="analyticsContent">
                    <div class="loading-spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...</p>
                </div>
            </div>
        `);
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    setMainContent(html) {
        const mainContent = document.getElementById('mainContent');
        if (mainContent) {
            mainContent.innerHTML = `<div class="container">${html}</div>`;
        }
    }

    hideLoadingScreen() {
        const loadingScreen = document.querySelector('.loading-screen');
        if (loadingScreen) {
            loadingScreen.style.display = 'none';
        }
    }

    getPageTitle(routeName) {
        const titles = {
            'dashboard': '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            'login': '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
            'orders': '–ó–∞–∫–∞–∑—ã',
            'processes': '–ü—Ä–æ—Ü–µ—Å—Å—ã',
            'users': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            'analytics': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
            'settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'
        };
        
        return `${titles[routeName] || '–°—Ç—Ä–∞–Ω–∏—Ü–∞'} - OMS`;
    }

    async loadDashboardData() {
        try {
            // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            await this.createDemoDataIfNeeded();
            
            const stats = store.getGetter('stats');
            const statsContainer = document.getElementById('dashboardStats');
            
            if (statsContainer) {
                statsContainer.innerHTML = `
                    <div class="stat-card">
                        <div class="stat-number">${stats.totalOrders}</div>
                        <div class="stat-label">–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${stats.ordersInProgress}</div>
                        <div class="stat-label">–í —Ä–∞–±–æ—Ç–µ</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${stats.ordersCompleted}</div>
                        <div class="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${stats.activeUsers}</div>
                        <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                    </div>
                `;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–∏:', error);
        }
    }

    async loadOrdersBoard() {
        try {
            const processes = store.getGetter('processes');
            const orders = store.getGetter('orders');
            const boardContainer = document.getElementById('processBoard');
            
            if (!boardContainer) return;
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            let boardHTML = '';
            
            // –ö–æ–ª–æ–Ω–∫–∞ "–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã"
            const newOrders = orders.filter(order => !order.currentProcessId);
            boardHTML += this.createProcessColumn(
                '–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', 
                newOrders,
                'new'
            );
            
            // –ö–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            processes.forEach(process => {
                const processOrders = orders.filter(order => order.currentProcessId === process.id);
                boardHTML += this.createProcessColumn(
                    process.name, 
                    processOrders,
                    'process',
                    process.id
                );
            });
            
            // –ö–æ–ª–æ–Ω–∫–∞ "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
            boardHTML += this.createProcessColumn(
                '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', 
                [],
                'done'
            );
            
            boardContainer.innerHTML = boardHTML;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
            const boardContainer = document.getElementById('processBoard');
            if (boardContainer) {
                boardContainer.innerHTML = `
                    <div class="alert alert-danger">
                        –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: ${error.message}
                    </div>
                `;
            }
        }
    }

    createProcessColumn(title, orders, type, processId = null) {
        const ordersHTML = orders.map(order => this.createOrderCard(order)).join('');
        
        return `
            <div class="process-column" data-process-id="${processId || type}">
                <div class="process-header">
                    <div class="process-title">${title}</div>
                    <div class="process-count">${orders.length} –∑–∞–∫–∞–∑–æ–≤</div>
                </div>
                <div class="process-body">
                    ${ordersHTML}
                </div>
            </div>
        `;
    }

    createOrderCard(order) {
        const product = store.getGetter('getProductById')(order.productId);
        const productName = product ? product.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ';
        
        return `
            <div class="order-card" data-order-id="${order.id}">
                <div class="order-header">
                    <div class="order-number">#${order.number || order.id}</div>
                    <div class="order-status ${this.getOrderStatusClass(order)}">
                        ${this.getOrderStatusText(order)}
                    </div>
                </div>
                <div class="order-info">
                    <div class="order-client">${order.clientName}</div>
                    <div class="order-product">${productName}</div>
                </div>
                <div class="order-meta">
                    <div class="order-date">${this.formatDate(order.createdAt)}</div>
                    <div class="order-quantity">–ö–æ–ª-–≤–æ: ${order.quantity || 1}</div>
                </div>
            </div>
        `;
    }

    getOrderStatusClass(order) {
        if (!order.currentProcessId) return 'done';
        if (order.defectInfo?.isDefective) return 'problem';
        return 'progress';
    }

    getOrderStatusText(order) {
        if (!order.currentProcessId) return '–ì–æ—Ç–æ–≤–æ';
        if (order.defectInfo?.isDefective) return '–ë—Ä–∞–∫';
        return '–í —Ä–∞–±–æ—Ç–µ';
    }

    formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit'
        });
    }

    async logout() {
        try {
            await authModule.logout();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
        }
    }

    showNotification(type, message, duration = 5000) {
        const container = document.getElementById('toastContainer');
        if (!container) return;

        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.innerHTML = `
            <div class="toast-header">
                <div class="toast-title">${this.getNotificationTitle(type)}</div>
                <button class="toast-close">&times;</button>
            </div>
            <div class="toast-body">${message}</div>
        `;

        container.appendChild(toast);

        // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, duration);

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É
        toast.querySelector('.toast-close').addEventListener('click', () => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        });
    }

    getNotificationTitle(type) {
        const titles = {
            'success': '–£—Å–ø–µ—à–Ω–æ',
            'error': '–û—à–∏–±–∫–∞',
            'warning': '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
            'info': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
        };
        return titles[type] || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
    }

    showError(title, message) {
        console.error(`${title}: ${message}`);
        this.showNotification('error', `${title}: ${message}`);
    }

    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    showCreateOrderModal() {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        this.showNotification('info', '–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö');
    }

    async createDemoDataIfNeeded() {
        const processes = store.getGetter('processes');
        const products = store.getGetter('products');
        const orders = store.getGetter('orders');
        
        // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø—Ä–æ—Ü–µ—Å—Å—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (processes.length === 0) {
            const demoProcesses = [
                { id: 1, name: '–†–∞—Å–∫—Ä–æ–π', position: 0 },
                { id: 2, name: '–û–±—Ä–∞–±–æ—Ç–∫–∞', position: 1 },
                { id: 3, name: '–°–±–æ—Ä–∫–∞', position: 2 },
                { id: 4, name: '–ö–æ–Ω—Ç—Ä–æ–ª—å', position: 3 }
            ];
            
            store.commit('SET_PROCESSES', demoProcesses);
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∏–∑–¥–µ–ª–∏—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (products.length === 0) {
            const demoProducts = [
                { id: 1, name: '–û–∫–Ω–æ –ü–í–• 1200x1400', processes: [1, 2, 3, 4] },
                { id: 2, name: '–î–≤–µ—Ä—å –≤—Ö–æ–¥–Ω–∞—è', processes: [1, 2, 3, 4] },
                { id: 3, name: '–°—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç', processes: [1, 3, 4] }
            ];
            
            store.commit('SET_PRODUCTS', demoProducts);
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∑–∞–∫–∞–∑—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (orders.length === 0) {
            const demoOrders = [
                {
                    id: 1,
                    number: '241201-001',
                    clientName: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
                    clientPhone: '+7 777 123 4567',
                    productId: 1,
                    quantity: 2,
                    currentProcessId: 1,
                    status: 'in_progress',
                    createdAt: new Date().toISOString()
                },
                {
                    id: 2,
                    number: '241201-002',
                    clientName: '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á',
                    clientPhone: '+7 777 987 6543',
                    productId: 2,
                    quantity: 1,
                    currentProcessId: 2,
                    status: 'in_progress',
                    createdAt: new Date().toISOString()
                },
                {
                    id: 3,
                    number: '241130-015',
                    clientName: '–°–∏–¥–æ—Ä–æ–≤ –°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤–∏—á',
                    clientPhone: '+7 777 555 1234',
                    productId: 1,
                    quantity: 3,
                    currentProcessId: null,
                    status: 'completed',
                    createdAt: new Date(Date.now() - 86400000).toISOString()
                }
            ];
            
            store.commit('SET_ORDERS', demoOrders);
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = new App();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.app = app;

export default app;
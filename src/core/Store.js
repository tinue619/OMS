import { eventBus } from './EventBus.js';

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export class Store {
    constructor(initialState = {}) {
        this.state = { ...initialState };
        this.mutations = new Map();
        this.actions = new Map();
        this.getters = new Map();
        this.subscribers = new Set();
        this.isCommitting = false;
        this.history = [];
        this.maxHistorySize = 50;
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º—É—Ç–∞—Ü–∏–∏
     */
    registerMutation(name, mutationFn) {
        if (this.mutations.has(name)) {
            console.warn(`‚ö†Ô∏è –ú—É—Ç–∞—Ü–∏—è '${name}' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞`);
        }
        this.mutations.set(name, mutationFn);
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
     */
    registerAction(name, actionFn) {
        if (this.actions.has(name)) {
            console.warn(`‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ '${name}' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ`);
        }
        this.actions.set(name, actionFn);
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–µ—Ç—Ç–µ—Ä–∞
     */
    registerGetter(name, getterFn) {
        if (this.getters.has(name)) {
            console.warn(`‚ö†Ô∏è –ì–µ—Ç—Ç–µ—Ä '${name}' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);
        }
        this.getters.set(name, getterFn);
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º—É—Ç–∞—Ü–∏–∏
     */
    commit(mutationName, payload = null) {
        if (!this.mutations.has(mutationName)) {
            throw new Error(`–ú—É—Ç–∞—Ü–∏—è '${mutationName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }

        const prevState = { ...this.state };
        this.isCommitting = true;

        try {
            const mutation = this.mutations.get(mutationName);
            mutation(this.state, payload);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.addToHistory({
                type: 'mutation',
                name: mutationName,
                payload,
                prevState,
                newState: { ...this.state },
                timestamp: Date.now()
            });

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            this.notifySubscribers(prevState, this.state, {
                type: 'mutation',
                name: mutationName,
                payload
            });

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            eventBus.emit('store:mutation', {
                name: mutationName,
                payload,
                prevState,
                newState: this.state
            });

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –º—É—Ç–∞—Ü–∏–∏ '${mutationName}':`, error);
            throw error;
        } finally {
            this.isCommitting = false;
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
     */
    async dispatch(actionName, payload = null) {
        if (!this.actions.has(actionName)) {
            throw new Error(`–î–µ–π—Å—Ç–≤–∏–µ '${actionName}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }

        try {
            const action = this.actions.get(actionName);
            const context = {
                state: this.state,
                commit: (mutation, data) => this.commit(mutation, data),
                dispatch: (action, data) => this.dispatch(action, data),
                getters: this.getAllGetters()
            };

            const result = await action(context, payload);
            
            eventBus.emit('store:action', {
                name: actionName,
                payload,
                result
            });

            return result;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–π—Å—Ç–≤–∏–∏ '${actionName}':`, error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–µ—Ç—Ç–µ—Ä–∞
     */
    getGetter(getterName) {
        if (!this.getters.has(getterName)) {
            throw new Error(`–ì–µ—Ç—Ç–µ—Ä '${getterName}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        const getter = this.getters.get(getterName);
        return getter(this.state, this.getAllGetters());
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–µ—Ç—Ç–µ—Ä–æ–≤
     */
    getAllGetters() {
        const getters = {};
        this.getters.forEach((getterFn, name) => {
            Object.defineProperty(getters, name, {
                get: () => getterFn(this.state, getters),
                enumerable: true
            });
        });
        return getters;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    getState() {
        return { ...this.state };
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
     */
    subscribe(callback) {
        this.subscribers.add(callback);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
        return () => {
            this.subscribers.delete(callback);
        };
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
     */
    notifySubscribers(prevState, newState, mutation) {
        this.subscribers.forEach(callback => {
            try {
                callback(prevState, newState, mutation);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–µ store:', error);
            }
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
     */
    addToHistory(entry) {
        this.history.push(entry);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if (this.history.length > this.maxHistorySize) {
            this.history = this.history.slice(-this.maxHistorySize);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    getHistory() {
        return [...this.history];
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
     */
    clearHistory() {
        this.history = [];
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
     */
    setMaxHistorySize(size) {
        this.maxHistorySize = size;
        if (this.history.length > size) {
            this.history = this.history.slice(-size);
        }
    }

    /**
     * –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
     */
    debug() {
        console.group('üè™ Store Debug Info');
        console.log('State:', this.state);
        console.log('Mutations:', Array.from(this.mutations.keys()));
        console.log('Actions:', Array.from(this.actions.keys()));
        console.log('Getters:', Array.from(this.getters.keys()));
        console.log('Subscribers:', this.subscribers.size);
        console.log('History entries:', this.history.length);
        console.groupEnd();
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const store = new Store();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.store = store;
/**
 * –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–ª–∞–±–æ–π —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
export class EventBus {
    constructor() {
        this.events = new Map();
        this.debug = false;
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
     */
    on(event, callback, options = {}) {
        if (!this.events.has(event)) {
            this.events.set(event, new Set());
        }
        
        const listener = {
            callback,
            once: options.once || false,
            context: options.context || null
        };
        
        this.events.get(event).add(listener);
        
        if (this.debug) {
            console.log(`üì° EventBus: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ '${event}'`);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
        return () => this.off(event, callback);
    }

    /**
     * –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
     */
    once(event, callback, context = null) {
        return this.on(event, callback, { once: true, context });
    }

    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è
     */
    off(event, callback) {
        if (!this.events.has(event)) return;
        
        const listeners = this.events.get(event);
        const toRemove = Array.from(listeners).find(
            listener => listener.callback === callback
        );
        
        if (toRemove) {
            listeners.delete(toRemove);
            if (this.debug) {
                console.log(`üì° EventBus: –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç '${event}'`);
            }
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
     */
    emit(event, data = null) {
        if (!this.events.has(event)) return;
        
        if (this.debug) {
            console.log(`üì° EventBus: —Å–æ–±—ã—Ç–∏–µ '${event}'`, data);
        }
        
        const listeners = Array.from(this.events.get(event));
        
        listeners.forEach(listener => {
            try {
                if (listener.context) {
                    listener.callback.call(listener.context, data);
                } else {
                    listener.callback(data);
                }
                
                // –£–¥–∞–ª—è–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
                if (listener.once) {
                    this.events.get(event).delete(listener);
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è '${event}':`, error);
            }
        });
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
     */
    clear() {
        this.events.clear();
        if (this.debug) {
            console.log('üì° EventBus: –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—á–∏—â–µ–Ω—ã');
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
     */
    getListenerCount(event) {
        return this.events.has(event) ? this.events.get(event).size : 0;
    }

    /**
     * –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É
     */
    setDebug(enabled) {
        this.debug = enabled;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const eventBus = new EventBus();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.eventBus = eventBus;